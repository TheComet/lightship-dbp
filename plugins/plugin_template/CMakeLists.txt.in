project ("plugin_@NAME@" C)

###############################################################################
# compiler flags for this project
###############################################################################

if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
    add_definitions (-W -Wall -Wextra -pedantic -Wno-unused-parameter)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
    add_definitions (-W -Wall -Wextra -pedantic -Wno-unused-parameter)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "MSVC")
endif ()

###############################################################################
# generate config.h and export.h for this plugin
###############################################################################

set (PLUGIN_@NAME_CAPS@_VERSION_MAJOR @VERSION_MAJOR@)
set (PLUGIN_@NAME_CAPS@_VERSION_MINOR @VERSION_MINOR@)
set (PLUGIN_@NAME_CAPS@_VERSION_PATCH @VERSION_PATCH@)
set (PLUGIN_@NAME_CAPS@_NAME "@NAME@" CACHE STRING "(No spaces or special chars) - Name of this plugin")
set (PLUGIN_@NAME_CAPS@_CATEGORY "@CATEGORY@" CACHE STRING "Category of this plugin, for service/event discovery")
set (PLUGIN_@NAME_CAPS@_AUTHOR "@AUTHOR@" CACHE STRING "Author of this plugin")
set (PLUGIN_@NAME_CAPS@_DESCRIPTION "@DESCRIPTION@" CACHE STRING "Short description of what this plugin does")
set (PLUGIN_@NAME_CAPS@_WEBSITE "@WEBSITE@" CACHE STRING "Website to refer to")
set (PLUGIN_@NAME_CAPS@_VERSION_STRING
    "${PLUGIN_@NAME_CAPS@_VERSION_MAJOR}.${PLUGIN_@NAME_CAPS@_VERSION_MINOR}.${PLUGIN_@NAME_CAPS@_VERSION_PATCH}")

configure_file ("include/plugin_@NAME@/config.h.in"
                "include/plugin_@NAME@/config.h")

set (PROJECT_NAME "PLUGIN_@NAME_CAPS@")
set (BUILD_TYPE "SHARED")

configure_file ("${EXPORT_H_TEMPLATE}"
                "include/plugin_@NAME@/export.h")

include_directories ("${CMAKE_CURRENT_BINARY_DIR}/include")

###############################################################################
# source files and library definition
###############################################################################

set (plugin_@NAME@_OUTPUT_NAME
    "plugin_@NAME@-${PLUGIN_@NAME_CAPS@_VERSION_STRING}")

file (GLOB plugin_@NAME@_HEADERS "include/plugin_@NAME@/*.h")
file (GLOB plugin_@NAME@_SOURCES "src/*.c")

include_directories ("include")

add_library (plugin_@NAME@ SHARED
    ${plugin_@NAME@_HEADERS}
    ${plugin_@NAME@_SOURCES}
)

# adjust output name to not have the "lib" prefix and insert version number
set_target_properties (plugin_@NAME@
    PROPERTIES
        PREFIX ""
    OUTPUT_NAME "plugin_@NAME@-${PLUGIN_@NAME_CAPS@_VERSION_STRING}"
)

# ensure plugin is built before lightship
add_dependencies (lightship plugin_@NAME@)

# this library is being built
add_definitions (${DEFINE_CMD}${PROJECT_NAME}_BUILDING)

###############################################################################
# copy plugin to plugins/ folder after build
###############################################################################

add_custom_command (TARGET plugin_@NAME@ POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${plugin_@NAME@_OUTPUT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/plugins/")

###############################################################################
# link lightship utility and plugin manager libraries
###############################################################################

target_link_libraries (plugin_@NAME@
    lightship_util
    plugin_manager
)

###############################################################################
# other libs...
###############################################################################

###############################################################################
# install targets
###############################################################################

install (
    TARGETS
        plugin_@NAME@
    LIBRARY DESTINATION
        "bin/plugins"
    RUNTIME DESTINATION
        "bin/plugins"
)
