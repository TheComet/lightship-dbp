==00:00:00:00.000 20785== Memcheck, a memory error detector
==00:00:00:00.000 20785== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==00:00:00:00.000 20785== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==00:00:00:00.000 20785== Command: ./lightship_tests --gtest_filter=-*Death*
==00:00:00:00.000 20785== 
Note: Google Test filter = -*Death*
[==========] Running 181 tests from 17 test cases.
[----------] Global test environment set-up.
[----------] 10 tests from ordered_vector_malloc
[ RUN      ]           ordered_vector_malloc.create
[       OK ] (72 ms)   ordered_vector_malloc.create
[ RUN      ]           ordered_vector_malloc.push_new_alloc
[       OK ] (145 ms)  ordered_vector_malloc.push_new_alloc
[ RUN      ]           ordered_vector_malloc.push_realloc
[       OK ] (39 ms)   ordered_vector_malloc.push_realloc
[ RUN      ]           ordered_vector_malloc.push_emplace_new_alloc
[       OK ] (33 ms)   ordered_vector_malloc.push_emplace_new_alloc
[ RUN      ]           ordered_vector_malloc.push_emplace_realloc
[       OK ] (22 ms)   ordered_vector_malloc.push_emplace_realloc
[ RUN      ]           ordered_vector_malloc.push_vector
[       OK ] (39 ms)   ordered_vector_malloc.push_vector
[ RUN      ]           ordered_vector_malloc.insert_new_alloc
[       OK ] (20 ms)   ordered_vector_malloc.insert_new_alloc
[ RUN      ]           ordered_vector_malloc.insert_realloc
[       OK ] (17 ms)   ordered_vector_malloc.insert_realloc
[ RUN      ]           ordered_vector_malloc.insert_emplace_new_alloc
[       OK ] (17 ms)   ordered_vector_malloc.insert_emplace_new_alloc
[ RUN      ]           ordered_vector_malloc.insert_emplace_realloc
[       OK ] (14 ms)   ordered_vector_malloc.insert_emplace_realloc
[----------] 10 tests from ordered_vector_malloc (455 ms total)

[----------] 2 tests from map_malloc
[ RUN      ]           map_malloc.create
[       OK ] (30 ms)   map_malloc.create
[ RUN      ]           map_malloc.insert
[       OK ] (8 ms)    map_malloc.insert
[----------] 2 tests from map_malloc (39 ms total)

[----------] 1 test from file_malloc
[ RUN      ]           file_malloc.load_into_memory
malloc() failed in file_load_into_memory() -- not enough memory
[       OK ] (50 ms)   file_malloc.load_into_memory
[----------] 1 test from file_malloc (50 ms total)

[----------] 5 tests from unordered_vector_malloc
[ RUN      ]           unordered_vector_malloc.create
[       OK ] (21 ms)   unordered_vector_malloc.create
[ RUN      ]           unordered_vector_malloc.push_new_alloc
malloc() failed in unordered_vector_push_emplace() -- out of memory
[       OK ] (25 ms)   unordered_vector_malloc.push_new_alloc
[ RUN      ]           unordered_vector_malloc.push_realloc
malloc() failed in unordered_vector_push_emplace() -- out of memory
[       OK ] (17 ms)   unordered_vector_malloc.push_realloc
[ RUN      ]           unordered_vector_malloc.push_emplace_new_alloc
malloc() failed in unordered_vector_push_emplace() -- out of memory
[       OK ] (17 ms)   unordered_vector_malloc.push_emplace_new_alloc
[ RUN      ]           unordered_vector_malloc.push_emplace_realloc
malloc() failed in unordered_vector_push_emplace() -- out of memory
[       OK ] (16 ms)   unordered_vector_malloc.push_emplace_realloc
[----------] 5 tests from unordered_vector_malloc (97 ms total)

[----------] 6 tests from linked_list_malloc
[ RUN      ]           linked_list_malloc.list_create
[       OK ] (30 ms)   linked_list_malloc.list_create
[ RUN      ]           linked_list_malloc.list_push
malloc() failed in list_push() -- not enough memory
[       OK ] (13 ms)   linked_list_malloc.list_push
[ RUN      ]           linked_list_malloc.list_clear
[       OK ] (24 ms)   linked_list_malloc.list_clear
[ RUN      ]           linked_list_malloc.list_pop
[       OK ] (13 ms)   linked_list_malloc.list_pop
[ RUN      ]           linked_list_malloc.list_erase_node
[       OK ] (13 ms)   linked_list_malloc.list_erase_node
[ RUN      ]           linked_list_malloc.list_erase_element
[       OK ] (11 ms)   linked_list_malloc.list_erase_element
[----------] 6 tests from linked_list_malloc (110 ms total)

[----------] 10 tests from ptree_malloc
[ RUN      ]           ptree_malloc.create
[       OK ] (34 ms)   ptree_malloc.create
[ RUN      ]           ptree_malloc.add_node_fail_immediately
malloc() failed in malloc_string() -- not enough memory
[       OK ] (18 ms)   ptree_malloc.add_node_fail_immediately
[ RUN      ]           ptree_malloc.add_node_fail_later
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
[       OK ] (38 ms)   ptree_malloc.add_node_fail_later
[ RUN      ]           ptree_malloc.set_parent_fail_immediately
malloc() failed in malloc_string() -- not enough memory
[       OK ] (36 ms)   ptree_malloc.set_parent_fail_immediately
[ RUN      ]           ptree_malloc.set_parent_fail_later
[       OK ] (23 ms)   ptree_malloc.set_parent_fail_later
[ RUN      ]           ptree_malloc.duplicate_tree_fail_immediately
[       OK ] (48 ms)   ptree_malloc.duplicate_tree_fail_immediately
[ RUN      ]           ptree_malloc.duplicate_tree_fail_later
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
[       OK ] (78 ms)   ptree_malloc.duplicate_tree_fail_later
[ RUN      ]           ptree_malloc.duplicate_into_existing_node_fail_immediately
[       OK ] (26 ms)   ptree_malloc.duplicate_into_existing_node_fail_immediately
[ RUN      ]           ptree_malloc.duplicate_into_existing_node_fail_later
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
malloc() failed in malloc_string() -- not enough memory
[       OK ] (98 ms)   ptree_malloc.duplicate_into_existing_node_fail_later
[ RUN      ]           ptree_malloc.get_node
malloc() failed in cat_strings() -- not enough memory
[       OK ] (12 ms)   ptree_malloc.get_node
[----------] 10 tests from ptree_malloc (414 ms total)

[----------] 1 test from memory_malloc
[ RUN      ]           memory_malloc.malloc
[       OK ] (12 ms)   memory_malloc.malloc
[----------] 1 test from memory_malloc (13 ms total)

[----------] 6 tests from string_malloc
[ RUN      ]           string_malloc.cat_strings
malloc() failed in cat_strings() -- not enough memory
[       OK ] (65 ms)   string_malloc.cat_strings
[ RUN      ]           string_malloc.malloc_string
malloc() failed in malloc_string() -- not enough memory
[       OK ] (10 ms)   string_malloc.malloc_string
[ RUN      ]           string_malloc.cat_wstrings
malloc() failed in cat_wstrings() -- not enough memory
[       OK ] (76 ms)   string_malloc.cat_wstrings
[ RUN      ]           string_malloc.malloc_wstring
malloc() failed in malloc_wstring() -- not enough memory
[       OK ] (12 ms)   string_malloc.malloc_wstring
[ RUN      ]           string_malloc.strtowcs
malloc() failed in strtowcs() -- not enough memory
[       OK ] (14 ms)   string_malloc.strtowcs
[ RUN      ]           string_malloc.wcstostr
malloc() failed in wcstostr() -- not enough memory
[       OK ] (11 ms)   string_malloc.wcstostr
[----------] 6 tests from string_malloc (192 ms total)

[----------] 2 tests from dir_malloc
[ RUN      ]           dir_malloc.get_directory_listing_invalid_path
Error searching directory "some/directory/no/one/cares": No such file or directory
[       OK ] (40 ms)   dir_malloc.get_directory_listing_invalid_path
[ RUN      ]           dir_malloc.get_directory_listing_valid_path
malloc() failed in cat_strings() -- not enough memory
malloc() failed in list_push() -- not enough memory
[       OK ] (31 ms)   dir_malloc.get_directory_listing_valid_path
[----------] 2 tests from dir_malloc (71 ms total)

[----------] 19 tests from map
[ RUN      ]           map.init_sets_correct_values
[       OK ] (14 ms)   map.init_sets_correct_values
[ RUN      ]           map.create_initialises_map
[       OK ] (5 ms)    map.create_initialises_map
[ RUN      ]           map.insertion_forwards
[       OK ] (11 ms)   map.insertion_forwards
[ RUN      ]           map.insertion_backwards
[       OK ] (15 ms)   map.insertion_backwards
[ RUN      ]           map.insertion_random
[       OK ] (15 ms)   map.insertion_random
[ RUN      ]           map.clear_keeps_underlying_vector
[       OK ] (20 ms)   map.clear_keeps_underlying_vector
[ RUN      ]           map.clear_free_deletes_underlying_vector
[       OK ] (5 ms)    map.clear_free_deletes_underlying_vector
[ RUN      ]           map.count_returns_correct_number
[       OK ] (4 ms)    map.count_returns_correct_number
[ RUN      ]           map.erase_elements
[       OK ] (37 ms)   map.erase_elements
[ RUN      ]           map.reinsertion_forwards
[       OK ] (18 ms)   map.reinsertion_forwards
[ RUN      ]           map.reinsertion_backwards
[       OK ] (11 ms)   map.reinsertion_backwards
[ RUN      ]           map.reinsertion_random
[       OK ] (13 ms)   map.reinsertion_random
[ RUN      ]           map.inserting_duplicate_keys_doesnt_replace_existing_elements
[       OK ] (9 ms)    map.inserting_duplicate_keys_doesnt_replace_existing_elements
[ RUN      ]           map.generating_keys_do_not_conflict_with_existing_ascending_keys
[       OK ] (13 ms)   map.generating_keys_do_not_conflict_with_existing_ascending_keys
[ RUN      ]           map.generating_keys_do_not_conflict_with_existing_descending_keys
[       OK ] (12 ms)   map.generating_keys_do_not_conflict_with_existing_descending_keys
[ RUN      ]           map.generating_keys_do_not_conflict_with_existing_random_keys
[       OK ] (7 ms)    map.generating_keys_do_not_conflict_with_existing_random_keys
[ RUN      ]           map.iterate_with_no_items
[       OK ] (5 ms)    map.iterate_with_no_items
[ RUN      ]           map.iterate_5_random_items
[       OK ] (29 ms)   map.iterate_5_random_items
[ RUN      ]           map.iterate_5_null_items
[       OK ] (25 ms)   map.iterate_5_null_items
[----------] 19 tests from map (283 ms total)

[----------] 19 tests from linked_list
[ RUN      ]           linked_list.init
[       OK ] (9 ms)    linked_list.init
[ RUN      ]           linked_list.create_initialises_list
[       OK ] (9 ms)    linked_list.create_initialises_list
[ RUN      ]           linked_list.push_correctly_links_nodes
[       OK ] (48 ms)   linked_list.push_correctly_links_nodes
[ RUN      ]           linked_list.clear_deletes_all_nodes
[       OK ] (8 ms)    linked_list.clear_deletes_all_nodes
[ RUN      ]           linked_list.pop_correctly_links_nodes
[       OK ] (41 ms)   linked_list.pop_correctly_links_nodes
[ RUN      ]           linked_list.pop_with_no_elements_returns_null
[       OK ] (11 ms)   linked_list.pop_with_no_elements_returns_null
[ RUN      ]           linked_list.erase_node_from_middle_correctly_links_nodes
[       OK ] (18 ms)   linked_list.erase_node_from_middle_correctly_links_nodes
[ RUN      ]           linked_list.erase_node_from_tail_correctly_links_nodes
[       OK ] (20 ms)   linked_list.erase_node_from_tail_correctly_links_nodes
[ RUN      ]           linked_list.erase_node_from_head_correctly_links_nodes
[       OK ] (20 ms)   linked_list.erase_node_from_head_correctly_links_nodes
[ RUN      ]           linked_list.erase_element_from_middle_correctly_links_nodes
[       OK ] (16 ms)   linked_list.erase_element_from_middle_correctly_links_nodes
[ RUN      ]           linked_list.erase_element_from_tail_correctly_links_nodes
[       OK ] (18 ms)   linked_list.erase_element_from_tail_correctly_links_nodes
[ RUN      ]           linked_list.erase_element_from_head_correctly_links_nodes
[       OK ] (15 ms)   linked_list.erase_element_from_head_correctly_links_nodes
[ RUN      ]           linked_list.erase_non_existing_element_returns_false
[       OK ] (16 ms)   linked_list.erase_non_existing_element_returns_false
[ RUN      ]           linked_list.erase_element_from_empty_list_returns_false
[       OK ] (8 ms)    linked_list.erase_element_from_empty_list_returns_false
[ RUN      ]           linked_list.erase_null_element_from_empty_list_returns_false
[       OK ] (12 ms)   linked_list.erase_null_element_from_empty_list_returns_false
[ RUN      ]           linked_list.iterate_forwards
[       OK ] (4 ms)    linked_list.iterate_forwards
[ RUN      ]           linked_list.iterate_backwards
[       OK ] (4 ms)    linked_list.iterate_backwards
[ RUN      ]           linked_list.iterate_forwards_and_erase
[       OK ] (12 ms)   linked_list.iterate_forwards_and_erase
[ RUN      ]           linked_list.iterate_backwards_and_erase
[       OK ] (11 ms)   linked_list.iterate_backwards_and_erase
[----------] 19 tests from linked_list (315 ms total)

[----------] 3 tests from dir
[ RUN      ]           dir.empty_directory
[       OK ] (15 ms)   dir.empty_directory
[ RUN      ]           dir.files_and_directories
[       OK ] (28 ms)   dir.files_and_directories
[ RUN      ]           dir.invalid_directory
Error searching directory "tests/test_dir/invalid/": No such file or directory
[       OK ] (10 ms)   dir.invalid_directory
[----------] 3 tests from dir (53 ms total)

[----------] 13 tests from yaml
[ RUN      ]           yaml.create
[       OK ] (49 ms)   yaml.create
[ RUN      ]           yaml.load_empty_string
[       OK ] (81 ms)   yaml.load_empty_string
[ RUN      ]           yaml.load_bare_minimum_yaml_doc
[       OK ] (95 ms)   yaml.load_bare_minimum_yaml_doc
[ RUN      ]           yaml.get_value_in_basic_yaml_doc
[       OK ] (73 ms)   yaml.get_value_in_basic_yaml_doc
[ RUN      ]           yaml.get_invalid_value_in_basic_yaml_doc
[       OK ] (32 ms)   yaml.get_invalid_value_in_basic_yaml_doc
[ RUN      ]           yaml.iterate_nodes_in_basic_yaml_doc
[       OK ] (63 ms)   yaml.iterate_nodes_in_basic_yaml_doc
[ RUN      ]           yaml.anchors_copy_ptree_correctly
[       OK ] (43 ms)   yaml.anchors_copy_ptree_correctly
[ RUN      ]           yaml.dont_copy_anchors_into_nodes_sharing_the_same_names
[yaml] Failed to duplicate tree (anchor copy failed)
[yaml] Make sure you're not using the same key more than once
Syntax error: Failed to parse YAML.
[       OK ] (12 ms)   yaml.dont_copy_anchors_into_nodes_sharing_the_same_names
[ RUN      ]           yaml.lists1
[       OK ] (51 ms)   yaml.lists1
[ RUN      ]           yaml.lists2
[       OK ] (23 ms)   yaml.lists2
[ RUN      ]           yaml.lists3
[       OK ] (43 ms)   yaml.lists3
[ RUN      ]           yaml.anchors_in_lists1
[       OK ] (26 ms)   yaml.anchors_in_lists1
[ RUN      ]           yaml.anchors_in_lists2
[       OK ] (26 ms)   yaml.anchors_in_lists2
[----------] 13 tests from yaml (627 ms total)

[----------] 21 tests from string
[ RUN      ]           string.cat_strings
[       OK ] (5 ms)    string.cat_strings
[ RUN      ]           string.cat_strings_with_empty_strings
[       OK ] (10 ms)   string.cat_strings_with_empty_strings
[ RUN      ]           string.cat_strings_with_null_ptr
[       OK ] (7 ms)    string.cat_strings_with_null_ptr
[ RUN      ]           string.cat_strings_with_no_strings
[       OK ] (6 ms)    string.cat_strings_with_no_strings
[ RUN      ]           string.malloc_string
[       OK ] (4 ms)    string.malloc_string
[ RUN      ]           string.malloc_string_empty_string
[       OK ] (5 ms)    string.malloc_string_empty_string
[ RUN      ]           string.cat_wstrings
[       OK ] (6 ms)    string.cat_wstrings
[ RUN      ]           string.cat_wstrings_with_empty_strings
[       OK ] (9 ms)    string.cat_wstrings_with_empty_strings
[ RUN      ]           string.cat_wstrings_with_null_ptr
[       OK ] (9 ms)    string.cat_wstrings_with_null_ptr
[ RUN      ]           string.cat_wstrings_with_no_strings
[       OK ] (5 ms)    string.cat_wstrings_with_no_strings
[ RUN      ]           string.malloc_wstring
[       OK ] (4 ms)    string.malloc_wstring
[ RUN      ]           string.malloc_wstring_empty_string
[       OK ] (5 ms)    string.malloc_wstring_empty_string
[ RUN      ]           string.strtok
[       OK ] (22 ms)   string.strtok
[ RUN      ]           string.strtok_delimiters_only
[       OK ] (5 ms)    string.strtok_delimiters_only
[ RUN      ]           string.strtok_empty_string
[       OK ] (6 ms)    string.strtok_empty_string
[ RUN      ]           string.string_to_wide_string
[       OK ] (5 ms)    string.string_to_wide_string
[ RUN      ]           string.string_to_wide_string_empty_string
[       OK ] (7 ms)    string.string_to_wide_string_empty_string
[ RUN      ]           string.wide_string_to_string
[       OK ] (6 ms)    string.wide_string_to_string
[ RUN      ]           string.wide_string_to_string_empty_string
[       OK ] (4 ms)    string.wide_string_to_string_empty_string
[ RUN      ]           string.crlf2lf
[       OK ] (12 ms)   string.crlf2lf
[ RUN      ]           string.crlf2lf_empty_string
[       OK ] (5 ms)    string.crlf2lf_empty_string
[----------] 21 tests from string (157 ms total)

[----------] 16 tests from unordered_vector
[ RUN      ]           unordered_vector.init
[       OK ] (8 ms)    unordered_vector.init
[ RUN      ]           unordered_vector.create_initialises_vector
[       OK ] (6 ms)    unordered_vector.create_initialises_vector
[ RUN      ]           unordered_vector.push_increments_count_and_causes_realloc_by_factor_2
[       OK ] (9 ms)    unordered_vector.push_increments_count_and_causes_realloc_by_factor_2
[ RUN      ]           unordered_vector.clear_keeps_buffer_and_resets_count
[       OK ] (6 ms)    unordered_vector.clear_keeps_buffer_and_resets_count
[ RUN      ]           unordered_vector.clear_free_deletes_buffer_and_resets_count
[       OK ] (5 ms)    unordered_vector.clear_free_deletes_buffer_and_resets_count
[ RUN      ]           unordered_vector.push_emplace_increments_count_and_causes_realloc_by_factor_2
[       OK ] (7 ms)    unordered_vector.push_emplace_increments_count_and_causes_realloc_by_factor_2
[ RUN      ]           unordered_vector.pop_returns_pushed_values
[       OK ] (16 ms)   unordered_vector.pop_returns_pushed_values
[ RUN      ]           unordered_vector.pop_returns_push_emplaced_values
[       OK ] (18 ms)   unordered_vector.pop_returns_push_emplaced_values
[ RUN      ]           unordered_vector.pop_empty_vector
[       OK ] (9 ms)    unordered_vector.pop_empty_vector
[ RUN      ]           unordered_vector.pop_clear_freed_vector
[       OK ] (8 ms)    unordered_vector.pop_clear_freed_vector
[ RUN      ]           unordered_vector.get_element_random_access
[       OK ] (11 ms)   unordered_vector.get_element_random_access
[ RUN      ]           unordered_vector.popping_preserves_existing_elements
[       OK ] (9 ms)    unordered_vector.popping_preserves_existing_elements
[ RUN      ]           unordered_vector.erasing_by_index_preserves_existing_elements
[       OK ] (17 ms)   unordered_vector.erasing_by_index_preserves_existing_elements
[ RUN      ]           unordered_vector.erasing_by_element_preserves_existing_elements
[       OK ] (15 ms)   unordered_vector.erasing_by_element_preserves_existing_elements
[ RUN      ]           unordered_vector.get_invalid_index
[       OK ] (5 ms)    unordered_vector.get_invalid_index
[ RUN      ]           unordered_vector.erase_invalid_index
[       OK ] (3 ms)    unordered_vector.erase_invalid_index
[----------] 16 tests from unordered_vector (163 ms total)

[----------] 29 tests from ptree
[ RUN      ]           ptree.init
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (86 ms)   ptree.init
[ RUN      ]           ptree.destroy_and_keep_root
[       OK ] (3 ms)    ptree.destroy_and_keep_root
[ RUN      ]           ptree.destroy_and_free_root
[       OK ] (3 ms)    ptree.destroy_and_free_root
[ RUN      ]           ptree.add_node_no_fill_in
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (91 ms)   ptree.add_node_no_fill_in
[ RUN      ]           ptree.add_node_fill_in_missing_middle_nodes
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node2")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (80 ms)   ptree.add_node_fill_in_missing_middle_nodes
[ RUN      ]           ptree.clean_tree
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (71 ms)   ptree.clean_tree
[ RUN      ]           ptree.clean_tree_middle_nodes
[       OK ] (6 ms)    ptree.clean_tree_middle_nodes
[ RUN      ]           ptree.dont_allow_duplicate_keys_in_same_node
[       OK ] (11 ms)   ptree.dont_allow_duplicate_keys_in_same_node
[ RUN      ]           ptree.dont_allow_duplicate_keys_with_fill_in
[       OK ] (12 ms)   ptree.dont_allow_duplicate_keys_with_fill_in
[ RUN      ]           ptree.remove_node_and_clean_up_tree
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
[       OK ] (7 ms)    ptree.remove_node_and_clean_up_tree
[ RUN      ]           ptree.recursively_destroy_tree_and_free_values
[       OK ] (361 ms)  ptree.recursively_destroy_tree_and_free_values
[ RUN      ]           ptree.recursively_destroy_tree_and_free_values_with_missing_free_functions
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
[       OK ] (35 ms)   ptree.recursively_destroy_tree_and_free_values_with_missing_free_functions
[ RUN      ]           ptree.recursively_destroy_node
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (64 ms)   ptree.recursively_destroy_node
[ RUN      ]           ptree.duplicate_tree_succeeds_if_value_is_null_and_dup_and_free_func_are_not_set
[       OK ] (4 ms)    ptree.duplicate_tree_succeeds_if_value_is_null_and_dup_and_free_func_are_not_set
[ RUN      ]           ptree.duplicate_tree_fails_if_dup_and_free_func_are_not_set_and_value_is_not_null
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (5 ms)    ptree.duplicate_tree_fails_if_dup_and_free_func_are_not_set_and_value_is_not_null
[ RUN      ]           ptree.duplicate_tree_fails_if_dup_func_is_not_set_and_value_is_not_null
[       OK ] (17 ms)   ptree.duplicate_tree_fails_if_dup_func_is_not_set_and_value_is_not_null
[ RUN      ]           ptree.duplicate_tree_fails_if_free_func_is_not_set_and_value_is_not_null
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (5 ms)    ptree.duplicate_tree_fails_if_free_func_is_not_set_and_value_is_not_null
[ RUN      ]           ptree.duplicate_tree
[       OK ] (171 ms)  ptree.duplicate_tree
[ RUN      ]           ptree.duplicate_tree_node
[       OK ] (92 ms)   ptree.duplicate_tree_node
[ RUN      ]           ptree.duplicate_tree_with_missing_dup_func_fails_and_cleans_up
[       OK ] (52 ms)   ptree.duplicate_tree_with_missing_dup_func_fails_and_cleans_up
[ RUN      ]           ptree.duplicate_children_into_existing_empty_node
[       OK ] (174 ms)  ptree.duplicate_children_into_existing_empty_node
[ RUN      ]           ptree.duplicate_tree_into_existing_node_with_children
[       OK ] (176 ms)  ptree.duplicate_tree_into_existing_node_with_children
[ RUN      ]           ptree.duplicate_tree_into_itself_fails
[       OK ] (78 ms)   ptree.duplicate_tree_into_itself_fails
[ RUN      ]           ptree.relocate_node_in_tree
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (74 ms)   ptree.relocate_node_in_tree
[ RUN      ]           ptree.relocate_parent_node_into_child_node_fails
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (83 ms)   ptree.relocate_parent_node_into_child_node_fails
[ RUN      ]           ptree.get_node_no_depth
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (14 ms)   ptree.get_node_no_depth
[ RUN      ]           ptree.get_node_existing_key
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (12 ms)   ptree.get_node_existing_key
[ RUN      ]           ptree.find_non_existing_key_in_tree
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node5")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node7")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "root")
The node will be de-allocated, the value will not.
[       OK ] (9 ms)    ptree.find_non_existing_key_in_tree
[ RUN      ]           ptree.traverse_node_children
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node2")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node3")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node4")
The node will be de-allocated, the value will not.
ptree_destroy_recurse(): Unable to de-allocate value! No free() function was specified! (at ptree node with name "node1")
The node will be de-allocated, the value will not.
[       OK ] (13 ms)   ptree.traverse_node_children
[----------] 29 tests from ptree (1824 ms total)

[----------] 18 tests from ordered_vector
[ RUN      ]           ordered_vector.init
[       OK ] (6 ms)    ordered_vector.init
[ RUN      ]           ordered_vector.create_initialises_vector
[       OK ] (6 ms)    ordered_vector.create_initialises_vector
[ RUN      ]           ordered_vector.push_increments_count_and_causes_realloc_by_factor_2
[       OK ] (7 ms)    ordered_vector.push_increments_count_and_causes_realloc_by_factor_2
[ RUN      ]           ordered_vector.clear_keeps_buffer_and_resets_count
[       OK ] (5 ms)    ordered_vector.clear_keeps_buffer_and_resets_count
[ RUN      ]           ordered_vector.clear_free_deletes_buffer_and_resets_count
[       OK ] (6 ms)    ordered_vector.clear_free_deletes_buffer_and_resets_count
[ RUN      ]           ordered_vector.push_emplace_increments_count_and_causes_realloc_by_factor_2
[       OK ] (8 ms)    ordered_vector.push_emplace_increments_count_and_causes_realloc_by_factor_2
[ RUN      ]           ordered_vector.pop_returns_pushed_values
[       OK ] (12 ms)   ordered_vector.pop_returns_pushed_values
[ RUN      ]           ordered_vector.pop_returns_push_emplaced_values
[       OK ] (13 ms)   ordered_vector.pop_returns_push_emplaced_values
[ RUN      ]           ordered_vector.pop_empty_vector
[       OK ] (7 ms)    ordered_vector.pop_empty_vector
[ RUN      ]           ordered_vector.pop_clear_freed_vector
[       OK ] (6 ms)    ordered_vector.pop_clear_freed_vector
[ RUN      ]           ordered_vector.get_element_random_access
[       OK ] (8 ms)    ordered_vector.get_element_random_access
[ RUN      ]           ordered_vector.popping_preserves_existing_elements
[       OK ] (9 ms)    ordered_vector.popping_preserves_existing_elements
[ RUN      ]           ordered_vector.erasing_by_index_preserves_existing_elements
[       OK ] (13 ms)   ordered_vector.erasing_by_index_preserves_existing_elements
[ RUN      ]           ordered_vector.erasing_by_element_preserves_existing_elements
[       OK ] (13 ms)   ordered_vector.erasing_by_element_preserves_existing_elements
[ RUN      ]           ordered_vector.get_invalid_index
[       OK ] (6 ms)    ordered_vector.get_invalid_index
[ RUN      ]           ordered_vector.erase_invalid_index
[       OK ] (4 ms)    ordered_vector.erase_invalid_index
[ RUN      ]           ordered_vector.inserting_preserves_existing_elements
[       OK ] (46 ms)   ordered_vector.inserting_preserves_existing_elements
[ RUN      ]           ordered_vector.insert_emplacing_preserves_existing_elements
[       OK ] (47 ms)   ordered_vector.insert_emplacing_preserves_existing_elements
[----------] 18 tests from ordered_vector (228 ms total)

[----------] Global test environment tear-down
=========================================
Memory Report
=========================================
allocations: 2186
deallocations: 2186
memory leaks: 0
=========================================
[==========] 181 tests from 17 test cases ran. (5223 ms total)
[  PASSED  ] 181 tests.
==00:00:00:07.289 20785== 
==00:00:00:07.289 20785== HEAP SUMMARY:
==00:00:00:07.289 20785==     in use at exit: 72,704 bytes in 1 blocks
==00:00:00:07.289 20785==   total heap usage: 15,747 allocs, 15,746 frees, 2,427,664 bytes allocated
==00:00:00:07.289 20785== 
==00:00:00:07.290 20785== 72,704 bytes in 1 blocks are still reachable in loss record 1 of 1
==00:00:00:07.290 20785==    at 0x4C28F60: malloc (vg_replace_malloc.c:296)
==00:00:00:07.290 20785==    by 0x571416F: ??? (in /usr/lib64/gcc/x86_64-pc-linux-gnu/5.1.0/libstdc++.so.6.0.21)
==00:00:00:07.290 20785==    by 0x400EC99: call_init.part.0 (in /lib64/ld-2.20.so)
==00:00:00:07.290 20785==    by 0x400ED82: _dl_init (in /lib64/ld-2.20.so)
==00:00:00:07.290 20785==    by 0x4001159: ??? (in /lib64/ld-2.20.so)
==00:00:00:07.290 20785==    by 0x1: ???
==00:00:00:07.290 20785==    by 0xFFF0001AE: ???
==00:00:00:07.290 20785==    by 0xFFF0001C0: ???
==00:00:00:07.290 20785== 
==00:00:00:07.290 20785== LEAK SUMMARY:
==00:00:00:07.290 20785==    definitely lost: 0 bytes in 0 blocks
==00:00:00:07.290 20785==    indirectly lost: 0 bytes in 0 blocks
==00:00:00:07.290 20785==      possibly lost: 0 bytes in 0 blocks
==00:00:00:07.290 20785==    still reachable: 72,704 bytes in 1 blocks
==00:00:00:07.290 20785==         suppressed: 0 bytes in 0 blocks
==00:00:00:07.290 20785== 
==00:00:00:07.290 20785== For counts of detected and suppressed errors, rerun with: -v
==00:00:00:07.290 20785== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
